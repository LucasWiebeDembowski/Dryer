#!/bin/bash
# saner programming env: these switches turn some bugs into errors
set -o errexit -o pipefail -o noclobber -o nounset

# -allow a command to fail with !’s side effect on errexit
# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
! getopt --test > /dev/null 
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo 'I’m sorry, `getopt --test` failed in this environment.'
    exit 1
fi

# ./dryer [OPTION]
#     -h, --help      display this help and exit
#     -r, --run       run the dryer monitor. print "Already running" if the monitor is running already.
#     -s, --stop      stop the dryer monitor
#     -l, --list      list PID, uptime, maybe other info, about the dryer monitor if it is running, or "Not running" if the monitor is not running.
#     -q, --query     query the dryer monitor with the state of the dryer (dryer running or not), or "Not running" if the monitor is not running. This option could be combined with --list so we wouldn't need this.

OPTIONS=hlrs
LONGOPTS=help,list,run,stop

# -regarding ! and PIPESTATUS see above
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

h=n l=n r=n s=n
# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -h|--help)
            h=y
            shift
            ;;
        -l|--list)
            l=y
            shift
            ;;
        -r|--run)
            r=y
            shift
            ;;
        -s|--stop)
            s=y
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

# handle non-option arguments
# if [[ $# -ne 1 ]]; then
#     echo "$0: A single input file is required."
#     exit 4
# fi
if [ "$r" == "y" ] && [ "$s" == "y" ]; then
    echo "Error, cannot both run and stop."
    exit 1
fi

echo "help: $h, list: $l, run: $r, stop: $s"

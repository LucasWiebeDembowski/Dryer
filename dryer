#!/bin/bash

dryerScript="Server.py"

list() {
    local pid=$(pgrep -f "python3 $dryerScript")
    if [ -z "$pid" ]; then
        echo "Dryer server is not up."
    else
        echo "Dryer server is up."
        echo "PID: $pid"
        printf "Dryer loop: "
        echo "list" | nc -q0 $(ip route | awk '/default/ {print $9}') 1234 | awk -F ',' '{print $1}'
    fi
}

runDryerServer() {
    nohup python3 $dryerScript &
    echo "Started $dryerScript with PID $(pgrep -f "python3 $dryerScript")"
}

killDryerServer() {
    pkill -f "python3 $dryerScript" && echo "Successfully killed dryer" ||
        echo "Could not kill dryer, it might not have been running yet."
}

# saner programming env: these switches turn some bugs into errors
set -o errexit -o pipefail -o noclobber -o nounset

# -allow a command to fail with !’s side effect on errexit
# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
! getopt --test > /dev/null 
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo 'I’m sorry, `getopt --test` failed in this environment.'
    exit 1
fi

# ./dryer [OPTION]
#     -h, --help      display this help and exit
#     -r, --run       run the dryer monitor. print "Already running" if the monitor is running already.
#     -s, --stop      stop the dryer monitor
#     -l, --list      list PID, uptime, maybe other info, about the dryer monitor if it is running, or "Not running" if the monitor is not running.
#     -q, --query     query the dryer monitor with the state of the dryer (dryer running or not), or "Not running" if the monitor is not running. This option could be combined with --list so we wouldn't need this.

OPTIONS=hlrkst
LONGOPTS=help,list,run,kill,start,stop

# -regarding ! and PIPESTATUS see above
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

h=n l=n r=n k=n s=n t=n 
# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -h|--help)
            echo -e "dryer\nProcesses the options below and executes on them in the order provided\n\
\t-h,\t--help\t\tprint help message\n\
\t-l,\t--list\t\tShow status of the dryer server and dryer monitor loop\n\
\t-r,\t--run\t\tRun dryer server and start the dryer monitor loop\n\
\t-k,\t--kill\t\tStop the dryer server\n\
\t-s,\t--start\t\tAssume the server is running already, start the dryer monitor loop\n\
\t-t,\t--stop\t\tStop the dryer monitor loop but don't stop the TCP server\n"
            h=y
            shift
            ;;
        -l|--list)
            l=y
            list
            shift
            ;;
        -r|--run)
            r=y
            runDryerServer
            shift
            ;;
        -k|--kill)
            k=y
            killDryerServer
            shift
            ;;
        -s|--start)
            s=y
            echo "start" | nc -q0 $(ip route | awk '/default/ {print $9}') 1234 ||
                echo "Failed to send start command, try starting the server first"
            shift
            ;;
        -t|--stop)
            t=y
            echo "stop" | nc -q0 $(ip route | awk '/default/ {print $9}') 1234 ||
                echo "Failed to send stop command, try starting the server first"
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

# handle non-option arguments
# if [[ $# -ne 1 ]]; then
#     echo "$0: A single input file is required."
#     exit 4
# fi
